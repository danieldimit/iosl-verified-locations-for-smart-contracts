{
  "swagger": "2.0",
  "info": {
    "description": "Blockchain IOSL - Proof of Location",
    "version": "1.0.0",
    "title": "BLOCKHAIN IOSL",
    "termsOfService": "",
    "contact": {
      "email": "singh.1@campus.tu-berlin.de"
    }
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "accounts",
      "description": "Everything about your account"
    },
    {
      "name": "owner",
      "description": "Access to owner APIs"
    },
    {
      "name": "renter",
      "description": "Access to renter APIs"
    },
    {
      "name": "oracle",
      "description": "Access to oracle APIs"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/account/": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get All the accounts in blockchain",
        "description": "",
        "operationId": "getAccounts",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          }
        }
      }
    },
    "/account/{address}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get associated address to the accounts in blockchain",
        "description": "",
        "operationId": "getAccountDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/oracle/": {
      "get": {
        "tags": [
          "oracle"
        ],
        "summary": "Get the oracle saved in the server",
        "description": "",
        "operationId": "getOracleAddress",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Oracle"
            }
          }
        }
      },
      "put": {
        "tags": [
          "oracle"
        ],
        "summary": "Set the ethereum address of the oracle",
        "description": "",
        "operationId": "setOracleAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "oracleAddress",
            "description": "Sets the address of the oracle",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Oracle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Oracle"
            }
          }
        }
      }
    },
    "/oracle/getRentedCarsContracts": {
      "get": {
        "tags": [
          "oracle"
        ],
        "summary": "Get the addresses of the car contracts of all actively rented cars",
        "description": "Get all actively rented cars, that have to be watched by the oracle",
        "operationId": "getRentedCarsContracts",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarContractInfo"
              }
            }
          }
        }
      }
    },
    "/oracle/updatePosition": {
      "put": {
        "tags": [
          "oracle"
        ],
        "summary": "Update position of a certain car in a car contract",
        "description": "Update the position of a car in a given car contract",
        "operationId": "updatePet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "carContractAddress",
            "in": "query",
            "description": "The address of the car contract",
            "required": true,
            "type": "string"
          },
          {
            "name": "geohashPosition",
            "in": "query",
            "description": "The geohashed position of the car",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/owner/{userAddress}/createOwnerContract": {
      "post": {
        "tags": [
          "owner"
        ],
        "summary": "Deploy Owner Contract",
        "description": "Create and deploy a contract in the blockchain",
        "operationId": "createOwnerContract",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/owner/{userAddress}": {
      "get": {
        "tags": [
          "owner"
        ],
        "summary": "Get owner address if it exists",
        "description": "Create and deploy a contract in the blockchain",
        "operationId": "getOwnerContract",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "ownerContractAddress": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/owner/{userAddress}/createCarContract": {
      "post": {
        "tags": [
          "owner"
        ],
        "summary": "Add new car by owner address",
        "description": "",
        "operationId": "createCarContract",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "car",
            "description": "Specifications of the new car object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CarContractConstructor"
            }
          },
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/owner/{userAddress}/getCarContracts": {
      "get": {
        "tags": [
          "owner"
        ],
        "summary": "Get all car contracts of a given car owner",
        "description": "Create and deploy a contract in the blockchain",
        "operationId": "getCarContracts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/owner/{userAddress}/showBalance": {
      "get": {
        "tags": [
          "owner"
        ],
        "summary": "Get the availble balance in account",
        "description": "get the availble balance in account",
        "operationId": "getBalance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/owner/{userAddress}/showRentedCarsInfo": {
      "get": {
        "tags": [
          "owner"
        ],
        "summary": "Get the list of renters",
        "description": "get the availble balance in account",
        "operationId": "getRenters",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RentedCarsInfo"
            }
          }
        }
      }
    },
    "/owner/{userAddress}/withdrawMoney": {
      "post": {
        "tags": [
          "owner"
        ],
        "summary": "Withdraw all money that were saved in the owner contract",
        "description": "",
        "operationId": "withdrawMoney",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/owner/{userAddress}/{caraddress}": {
      "delete": {
        "tags": [
          "owner"
        ],
        "summary": "Delete a Car from the contract",
        "description": "",
        "operationId": "deleteCar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "address",
            "required": true,
            "type": "string",
            "format": "string"
          },
          {
            "name": "caraddress",
            "in": "path",
            "description": "car contract address",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/renter/getAllAvailableCars": {
      "get": {
        "tags": [
          "renter"
        ],
        "summary": "Get all cars available in the blockchain",
        "description": "Goes through all owner contracts and gathers all owner contracts that have a available car in them. Return owner contracts and their car contracts.",
        "operationId": "getAllAvailableCars",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OwnerAndHisAvailableCars"
              }
            }
          }
        }
      }
    },
    "/renter/{userAddress}/getRentedCars": {
      "get": {
        "tags": [
          "renter"
        ],
        "summary": "Get car contracts (and the coresponding owner contracts) in which the userAddress is a renter",
        "description": "Returns owner contract in which the user with userAddress is in the array of renters",
        "operationId": "getOwnerContractsOfRenter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address of the renter in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OwnerAndHisAvailableCars"
              }
            }
          }
        }
      }
    },
    "/renter/{userAddress}/{ownerContract}/{carContractAddress}/rentCar": {
      "put": {
        "tags": [
          "renter"
        ],
        "summary": "Rent car",
        "description": "Rent a car",
        "operationId": "rentCar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          },
          {
            "name": "ownerContract",
            "in": "path",
            "description": "The ower contract address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          },
          {
            "name": "carContractAddress",
            "in": "path",
            "description": "The address of the car contract of the car that gets rented",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      }
    },
    "/renter/{userAddress}/{ownerContract}/{carContractAddress}/returnCar": {
      "put": {
        "tags": [
          "renter"
        ],
        "summary": "Return car",
        "description": "Returns owner contracts in which the user with userAddress is a renter",
        "operationId": "returnCar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          },
          {
            "name": "ownerContract",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          },
          {
            "name": "carContractAddress",
            "in": "path",
            "description": "The user address in the blockchain",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Oracle": {
      "type": "object",
      "properties": {
        "oracleAddress": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Oracle"
      }
    },
    "CarContractInfo": {
      "type": "object",
      "properties": {
        "carContractAddress": {
          "type": "string",
          "format": "hex-address"
        },
        "ownerAddress": {
          "type": "string",
          "format": "hex-address"
        },
        "carDetails": {
          "$ref": "#/definitions/CarContractConstructor"
        }
      },
      "xml": {
        "name": "Contract"
      }
    },
    "CarContractConstructor": {
      "type": "object",
      "properties": {
        "carGSMNum": {
          "type": "string"
        },
        "penaltyValue": {
          "type": "integer",
          "format": "int32"
        },
        "position": {
          "type": "integer"
        },
        "geofence": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "xml": {
        "name": "Contract"
      }
    },
    "OwnerAndHisAvailableCars": {
      "type": "object",
      "properties": {
        "ownerContract": {
          "type": "string"
        },
        "availableCarContract": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "carContractAddress": {
                "type": "string"
              },
              "carDetails": {
                "$ref": "#/definitions/CarContractConstructor"
              }
            }
          }
        }
      }
    },
    "RentedCarsInfo": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "renterAddress": {
            "type": "string"
          },
          "carDetails": {
            "$ref": "#/definitions/CarContractConstructor"
          }
        }
      }
    },
    "Address": {
      "type": "string"
    }
  }
}